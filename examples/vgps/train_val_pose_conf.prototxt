name: "JointAndImageStateRegressionNet"
layers {
  name: "data"
  type: HDF5_DATA
  top: "position"
  top: "rgb_frames"
  hdf5_data_param {
    source: "examples/vgps/train_pose.txt"
    batch_size: 50
  }
  include: { phase: TRAIN }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "position"
  top: "rgb_frames"
  hdf5_data_param {
    source: "examples/vgps/val_pose.txt"
    batch_size: 5
  }
  include: {
    phase: TEST
    stage: 'test-on-test'
  }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "position"
  top: "rgb_frames"
  hdf5_data_param {
    source: "examples/vgps/train_pose.txt"
    batch_size: 5
  }
  include: {
    phase: TEST
    stage: 'test-on-train'
  }
}
# Image Processing Layers
layers {
  name: "conv1/7x7_s2"
  type: CONVOLUTION
  bottom: "rgb_frames"
  top: "conv1"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 0
  weight_decay: 0
  convolution_param {
    num_output: 64
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "conv1"
  top: "conv2"
  blobs_lr: 10
  blobs_lr: 20
  weight_decay: 0
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "conv2"
  top: "conv3"
  blobs_lr: 10
  blobs_lr: 20
  weight_decay: 0
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}

### CONFIDENCE MEASURES ###
# output should be 32x1, one for each channel
layers {
  name: "softmax_all"
  type: SOFTMAX
  bottom: "conv3"
  top: "softmax_all"
  softmax_param {
    engine: CAFFE
    temperature: 1.0
    dimension: "all"
  }
}
layers {
  name: "conf"
  type: INNER_PRODUCT
  bottom: "softmax_all"
  top: "alpha_orig"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      channels: 32
      width: 109
      height: 109
      xy: "ones"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc_alpha"
  type: INNER_PRODUCT
  bottom: "alpha_orig"
  top: "fc_alpha"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc_alpha_relu"
  type: RELU
  bottom: "fc_alpha"
  top: "fc_alpha"
}
layers {
  name: "softmax_alpha2"
  type: SOFTMAX
  bottom: "fc_alpha"
  top: "conf"
  softmax_param {
    engine: CAFFE
    temperature: 1.0
    dimension: "all"
  }
}



layers {
  name: "softmax"
  type: SOFTMAX
  bottom: "conv3"
  top: "image_out"
  softmax_param {
    engine: CAFFE
    temperature: 1.0
    dimension: "spatial"
  }
}
layers {
  name: "fc_x"
  type: INNER_PRODUCT
  bottom: "image_out"
  top: "image_x"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      channels: 32
      width: 109
      height: 109
      xy: "x"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "fc_y"
  type: INNER_PRODUCT
  bottom: "image_out"
  top: "image_y"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      channels: 32
      width: 109
      height: 109
      xy: "y"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layers {
  name: "mul_confx"
  type: ELTWISE
  bottom: "image_x"
  bottom: "conf"
  top: "image_x_conf"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "mul_confy"
  type: ELTWISE
  bottom: "image_y"
  bottom: "conf"
  top: "image_y_conf"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "concat_xy"
  type: CONCAT
  bottom: "image_y_conf"
  bottom: "image_x_conf"
  bottom: "conf"
  top: "image_xy"
}

layers {
  name: "fc1_smaller"
  type: INNER_PRODUCT
  bottom: "image_xy"
  top: "image_features_smaller"
  blobs_lr: 5
  blobs_lr: 10
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layers {
  name: "distance"
  type: EUCLIDEAN_LOSS
  bottom: "image_features_smaller"
  bottom: "position"
  top: "average_distance"
  include: { phase: TEST }
}
layers {
  name: "loss"
  type: EUCLIDEAN_LOSS
  bottom: "image_features_smaller"
  bottom: "position"
  top: "euclidean_error"
}
