name: "JointAndImageStateRegressionNet"
layer {
  name: "data"
  type: "HDF5Data"
  top: "position"
  top: "rgb_frames"
  top: "clip"
  hdf5_data_param {
    source: "examples/rsgps/train_lstm.txt"
    batch_size: 20
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "position"
  top: "rgb_frames"
top: "clip"
  hdf5_data_param {
    source: "examples/rsgps/val_lstm.txt"
    batch_size: 20
  }
  include: {
    phase: TEST
    stage: 'test-on-val'
  }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "position"
  top: "rgb_frames"
top: "clip"
  hdf5_data_param {
    source: "examples/rsgps/train_lstm.txt"
    batch_size: 20
  }
  include: {
    phase: TEST
    stage: 'test-on-train'
  }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "position"
  top: "rgb_frames"
top: "clip"
  hdf5_data_param {
    source: "examples/rsgps/val_lstm.txt"
    batch_size: 20
  }
  include: {
    phase: TEST
    stage: 'vis'
  }
}

layer {
  name: "clip_reshape"
  type: "Reshape"
  bottom: "clip"
  top: "clip_reshape"
  reshape_param {
    shape {
      dim: 20
      dim: 1
    }
  }
}

#layer {
#  name: "lrn"
#  type: "LRN"
#  bottom: "rgb_frames"
#  top: "lrn_frames"
#  lrn_param {
#    norm_region: WITHIN_CHANNEL
#    alpha: 5e-04
#    beta: 0.3
#  }
#}

# Image Processing Layers
layer {
  name: "conv1/7x7_s2"
  type: "Convolution"
  bottom: "rgb_frames"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 2
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv1"
  top: "conv1_bn"
  name: "conv1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats : false
    moving_average_fraction : 0.5
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1_bn"
  top: "conv1_r"
}


layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1_r"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 2
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv2"
  top: "conv2_bn"
  name: "conv2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats : false
    moving_average_fraction : 0.5
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2_bn"
  top: "conv2_r"
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2_r"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 2
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv3"
  top: "conv3_bn"
  name: "conv3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats : false
    moving_average_fraction : 0.5
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3_bn"
  top: "conv3_r"
}
layer {
  name: "softmax"
  type: "SpatialSoftmax"
  bottom: "conv3_r"
  top: "conv3_o"
  spatial_softmax_param {
    engine: CAFFE
    temperature: 1.0
    #dimension: "spatial"
  }
}
layer {
  name: "fc_images"
  type: "InnerProduct"
  bottom: "conv3_o"
  top: "expected_xy"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2  # dimensionality will actually be 2*num_channels
    axis: -2
    weight_filler {
      type: "expectation"
      expectation_option: "xy"
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "E[X]^2"
  type: "Eltwise"
  bottom: "expected_xy"
  bottom: "expected_xy"
  top: "expected_xy2"
  eltwise_param {
    operation: PROD
  }
}


layer {
  name: "fc_images_nxy2"
  type: "InnerProduct"
  bottom: "conv3_o"
  top: "nexpected_x2y2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2  # dimensionality will actually be 2*num_channels
    axis: -2
    weight_filler {
      type: "expectation"
      expectation_option: "-x^2y^2"
      width: 109
      height: 109
      #xy: "nboth2"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "variance"
  type: "Eltwise"
  bottom: "expected_xy2"
  bottom: "nexpected_x2y2"
  top: "variance_xy"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "concat_exp_var"
  type: "Concat"
  bottom: "expected_xy"
  bottom: "variance_xy"
  top: "image_xy_feats"
}


layer {
  name: "reshape"
  type: "Reshape"
  bottom: "image_xy_feats"
  top: "feats_reshape"
  reshape_param {
    shape {
      dim: 20
      dim: 1
      dim: 256
    }
  }
}

layer {
  name: "fc1_smaller"
  type: "RNN"
  bottom: "feats_reshape"
  bottom: "clip_reshape"
  top: "image_features_smaller"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  recurrent_param {
    num_output: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  rnn_param {
    output_nonlinearity: "Flatten"
  }
}

layer {
  name: "reshape_output"
  type: "Reshape"
  bottom: "image_features_smaller"
  top: "image_features_smaller"
  reshape_param {
    shape {
    dim: 20
    dim: 9
    }
  }
}

layer {
  name: "euc_distance"
  type: "EuclideanDistance"
  bottom: "image_features_smaller"
  bottom: "position"
  top: "average_distance"
  include: {phase: TEST}
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "image_features_smaller"
  bottom: "position"
  top: "euclidean_error"
  loss_weight: 1
}

layer {
    name: "pos_output"
    type: "HDF5Output"
    hdf5_output_param {
        file_name: "test_output/feedf_positions.h5"
    }
    bottom: "rgb_frames"
    bottom: "image_features_smaller"
    include: {
      phase: TEST
      stage: 'vis'
    }
}

