name: "JointAndImageStateRegressionNet"
layers {
  name: "data"
  type: HDF5_DATA
  top: "position_a"
  top: "rgb_frames_a"
  hdf5_data_param {
    source: "examples/vgps/train_pose_a.txt"
    batch_size: 25
  }
  include: { phase: TRAIN }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "position_a"
  top: "rgb_frames_a"
  hdf5_data_param {
    source: "examples/vgps/val_pose_a.txt"
    batch_size: 5
  }
  include: {
    phase: TEST
    stage: 'test-on-val'
  }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "position_b"
  top: "rgb_frames_b"
  hdf5_data_param {
    source: "examples/vgps/train_pose_b.txt"
    batch_size: 25
  }
  include: { phase: TRAIN }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "position_b"
  top: "rgb_frames_b"
  hdf5_data_param {
    source: "examples/vgps/val_pose_b.txt"
    batch_size: 5
  }
  include: {
    phase: TEST
    stage: 'test-on-val'
  }
}

layers {
  name: "data"
  type: HDF5_DATA
  top: "position_a"
  top: "rgb_frames_a"
  hdf5_data_param {
    source: "examples/vgps/train_pose_a.txt"
    batch_size: 5
  }
  include: {
    phase: TEST
    stage: 'test-on-train'
  }
}
layers {
  name: "data"
  type: HDF5_DATA
  top: "position_b"
  top: "rgb_frames_b"
  hdf5_data_param {
    source: "examples/vgps/train_pose_b.txt"
    batch_size: 5
  }
  include: {
    phase: TEST
    stage: 'test-on-train'
  }
}

layers {
  name: "lrn"
  type: LRN
  bottom: "rgb_frames_a"
  top: "lrn_frames_a"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    alpha: 5e-05
    beta: 0.75
  }
}
layers {
  name: "lrn"
  type: LRN
  bottom: "rgb_frames_b"
  top: "lrn_frames_b"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    alpha: 5e-05
    beta: 0.75
  }
}

# Image Processing Layers
layers {
  name: "conv1/7x7_s2"
  type: CONVOLUTION
  bottom: "lrn_frames_a"
  top: "conv1_a"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 2
  weight_decay: 0
  convolution_param {
    num_output: 64
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "conv1_w"
  param: "conv1_b"
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1_a"
  top: "conv1_a"
}

#layers {
#  name: "lrn2"
#  type: LRN
#  bottom: "conv1"
#  top: "conv1_lrn"
#  lrn_param {
#    norm_region: ACROSS_CHANNELS
#    alpha: 5e-05
#    beta: 0.75
#  }
#}


layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "conv1_a"
  top: "conv2_a"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 2
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "conv2_w"
  param: "conv2_b"
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2_a"
  top: "conv2_a"
}
layers {
  name: "conv3_a"
  type: CONVOLUTION
  bottom: "conv2_a"
  top: "conv3_a"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 2
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "conv3_w"
  param: "conv3_b"
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3_a"
  top: "soft_a"
}
layers {
  name: "softmax"
  type: SOFTMAX
  bottom: "soft_a"
  top: "soft_a"
  softmax_param {
    engine: CAFFE
    temperature: 1.0
    dimension: "spatial"
  }
}
layers {
  name: "fc_imagesx"
  type: INNER_PRODUCT
  bottom: "soft_a"
  top: "expected_x_a"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      xy: "x"
      channels: 32
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "fcix_w"
  param: "fcix_b"
}
layers {
  name: "fc_imagesy"
  type: INNER_PRODUCT
  bottom: "soft_a"
  top: "expected_y_a"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      xy: "y"
      channels: 32
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "fciy_w"
  param: "fciy_b"
}

#### Absence/Presence Computation ###
layers {
  name: "sig"
  type: SIGMOID
  bottom: "conv3_a"
  top: "sig_a"
}
layers {
  name: "soft*conv3sig"
  type: ELTWISE
  bottom: "sig_a"
  bottom: "soft_a"
  top: "valuemap_a"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "sum_value"
  type: INNER_PRODUCT
  bottom: "valuemap_a"
  top: "value_a"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      xy: "ones"
      channels: 32
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "sum_w"
  param: "sum_b"
}
layers {
  name: "ax"
  type: ELTWISE
  bottom: "expected_x_a"
  bottom: "value_a"
  top: "ax_a"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "ay"
  type: ELTWISE
  bottom: "expected_y_a"
  bottom: "value_a"
  top: "ay_a"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "axy"
  type: CONCAT
  bottom: "ax_a"
  bottom: "ay_a"
  bottom: "value_a"
  top: "homogeneous_coord_a"
}

layers {
  name: "fc1_smaller"
  type: INNER_PRODUCT
  bottom: "homogeneous_coord_a"
  top: "image_features_smaller_a"
  blobs_lr: 5
  blobs_lr: 10
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "fcs_w"
  param: "fcs_b"
}
layers {
  name: "euc_distance"
  type: EUCLIDEAN_DISTANCE
  bottom: "image_features_smaller_a"
  bottom: "position_a"
  top: "average_distance_a"
  include: {phase: TEST}
}

layers {
  name: "loss"
  type: EUCLIDEAN_LOSS
  bottom: "image_features_smaller_a"
  bottom: "position_a"
  top: "euclidean_error_a"
  loss_weight: 1
}



########### DUPLICATED SIAMESE NETWORK ###########

# Image Processing Layers
layers {
  name: "conv1/7x7_s2_p"
  type: CONVOLUTION
  bottom: "lrn_frames_b"
  top: "conv1_b"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 2
  weight_decay: 0
  convolution_param {
    num_output: 64
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "conv1_w"
  param: "conv1_b"
}
layers {
  name: "relu1_p"
  type: RELU
  bottom: "conv1_b"
  top: "conv1_b"
}
layers {
  name: "conv2_p"
  type: CONVOLUTION
  bottom: "conv1_b"
  top: "conv2_b"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 2
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "conv2_w"
  param: "conv2_b"
}
layers {
  name: "relu2_p"
  type: RELU
  bottom: "conv2_b"
  top: "conv2_b"
}
layers {
  name: "conv3_p"
  type: CONVOLUTION
  bottom: "conv2_b"
  top: "conv3_b"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 2
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "conv3_w"
  param: "conv3_b"
}
layers {
  name: "relu3_p"
  type: RELU
  bottom: "conv3_b"
  top: "soft_b"
}
layers {
  name: "softmax_p"
  type: SOFTMAX
  bottom: "soft_b"
  top: "soft_b"
  softmax_param {
    engine: CAFFE
    temperature: 1.0
    dimension: "spatial"
  }
}
layers {
  name: "fc_imagesx_p"
  type: INNER_PRODUCT
  bottom: "soft_b"
  top: "expected_x_b"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      xy: "x"
      channels: 32
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "fcix_w"
  param: "fcix_b"
}
layers {
  name: "fc_imagesy_p"
  type: INNER_PRODUCT
  bottom: "soft_b"
  top: "expected_y_b"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      xy: "y"
      channels: 32
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "fciy_w"
  param: "fciy_b"
}

#### Absence/Presence Computation ###
layers {
  name: "sig_p"
  type: SIGMOID
  bottom: "conv3_b"
  top: "sig_b"
}
layers {
  name: "soft*conv3sig_p"
  type: ELTWISE
  bottom: "sig_b"
  bottom: "soft_b"
  top: "valuemap_b"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "sum_value_p"
  type: INNER_PRODUCT
  bottom: "valuemap_b"
  top: "value_b"
  blobs_lr: 0
  blobs_lr: 0
  weight_decay: 0
  weight_decay: 0
  inner_product_param {
    num_output: 32
    weight_filler {
      type: "imagexy"
      xy: "ones"
      channels: 32
      width: 109
      height: 109
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "sum_w"
  param: "sum_b"
}
layers {
  name: "ax_p"
  type: ELTWISE
  bottom: "expected_x_b"
  bottom: "value_b"
  top: "ax_b"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "ay_p"
  type: ELTWISE
  bottom: "expected_y_b"
  bottom: "value_b"
  top: "ay_b"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "axy_p"
  type: CONCAT
  bottom: "ax_b"
  bottom: "ay_b"
  bottom: "value_b"
  top: "homogeneous_coord_b"
}
layers {
  name: "fc1_smaller_p"
  type: INNER_PRODUCT
  bottom: "homogeneous_coord_b"
  top: "image_features_smaller_b"
  blobs_lr: 5
  blobs_lr: 10
  weight_decay: 1
  weight_decay: 0
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param: "fcs_w"
  param: "fcs_b"
}
layers {
  name: "euc_distance_p"
  type: EUCLIDEAN_DISTANCE
  bottom: "image_features_smaller_b"
  bottom: "position_b"
  top: "average_distance_b"
  include: {phase: TEST}
}
layers {
  name: "loss_p"
  type: EUCLIDEAN_LOSS
  bottom: "image_features_smaller_b"
  bottom: "position_b"
  top: "euclidean_error_b"
  loss_weight: 1
}









#layers {
#  name: "output_lrn"
#  type: HDF5_OUTPUT
#  hdf5_output_param {
#    file_name: "examples/vgps/data/lrn_output_exposure.h5"
#  }
#  bottom: "lrn_frames"
#  bottom: "rgb_frames"
#  include: {
#    phase: TEST
#  }
#}

